// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuthorizedUser extends ethereum.Event {
  get params(): AuthorizedUser__Params {
    return new AuthorizedUser__Params(this);
  }
}

export class AuthorizedUser__Params {
  _event: AuthorizedUser;

  constructor(event: AuthorizedUser) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DeauthorizedUser extends ethereum.Event {
  get params(): DeauthorizedUser__Params {
    return new DeauthorizedUser__Params(this);
  }
}

export class DeauthorizedUser__Params {
  _event: DeauthorizedUser;

  constructor(event: DeauthorizedUser) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewFinderAddress extends ethereum.Event {
  get params(): NewFinderAddress__Params {
    return new NewFinderAddress__Params(this);
  }
}

export class NewFinderAddress__Params {
  _event: NewFinderAddress;

  constructor(event: NewFinderAddress) {
    this._event = event;
  }

  get oldFinder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newFinder(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class QuestionFlaggedForAdminResolution extends ethereum.Event {
  get params(): QuestionFlaggedForAdminResolution__Params {
    return new QuestionFlaggedForAdminResolution__Params(this);
  }
}

export class QuestionFlaggedForAdminResolution__Params {
  _event: QuestionFlaggedForAdminResolution;

  constructor(event: QuestionFlaggedForAdminResolution) {
    this._event = event;
  }

  get questionID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class QuestionInitialized extends ethereum.Event {
  get params(): QuestionInitialized__Params {
    return new QuestionInitialized__Params(this);
  }
}

export class QuestionInitialized__Params {
  _event: QuestionInitialized;

  constructor(event: QuestionInitialized) {
    this._event = event;
  }

  get questionID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get ancillaryData(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get resolutionTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get proposalBond(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get earlyResolutionEnabled(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class QuestionPaused extends ethereum.Event {
  get params(): QuestionPaused__Params {
    return new QuestionPaused__Params(this);
  }
}

export class QuestionPaused__Params {
  _event: QuestionPaused;

  constructor(event: QuestionPaused) {
    this._event = event;
  }

  get questionID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class QuestionReset extends ethereum.Event {
  get params(): QuestionReset__Params {
    return new QuestionReset__Params(this);
  }
}

export class QuestionReset__Params {
  _event: QuestionReset;

  constructor(event: QuestionReset) {
    this._event = event;
  }

  get questionID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class QuestionResolved extends ethereum.Event {
  get params(): QuestionResolved__Params {
    return new QuestionResolved__Params(this);
  }
}

export class QuestionResolved__Params {
  _event: QuestionResolved;

  constructor(event: QuestionResolved) {
    this._event = event;
  }

  get questionID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get emergencyReport(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class QuestionSettled extends ethereum.Event {
  get params(): QuestionSettled__Params {
    return new QuestionSettled__Params(this);
  }
}

export class QuestionSettled__Params {
  _event: QuestionSettled;

  constructor(event: QuestionSettled) {
    this._event = event;
  }

  get questionID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get settledPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get earlyResolution(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class QuestionUnpaused extends ethereum.Event {
  get params(): QuestionUnpaused__Params {
    return new QuestionUnpaused__Params(this);
  }
}

export class QuestionUnpaused__Params {
  _event: QuestionUnpaused;

  constructor(event: QuestionUnpaused) {
    this._event = event;
  }

  get questionID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class QuestionUpdated extends ethereum.Event {
  get params(): QuestionUpdated__Params {
    return new QuestionUpdated__Params(this);
  }
}

export class QuestionUpdated__Params {
  _event: QuestionUpdated;

  constructor(event: QuestionUpdated) {
    this._event = event;
  }

  get questionID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get ancillaryData(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get resolutionTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get proposalBond(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get earlyResolutionEnabled(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class ResolutionDataRequested extends ethereum.Event {
  get params(): ResolutionDataRequested__Params {
    return new ResolutionDataRequested__Params(this);
  }
}

export class ResolutionDataRequested__Params {
  _event: ResolutionDataRequested;

  constructor(event: ResolutionDataRequested) {
    this._event = event;
  }

  get requestor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get questionID(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get identifier(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get ancillaryData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get rewardToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get proposalBond(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get earlyResolution(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }
}

export class UmaCtfAdapterOld__questionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: boolean;
  value8: boolean;
  value9: Address;
  value10: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: boolean,
    value8: boolean,
    value9: Address,
    value10: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    map.set("value10", ethereum.Value.fromBytes(this.value10));
    return map;
  }

  getResolutionTime(): BigInt {
    return this.value0;
  }

  getReward(): BigInt {
    return this.value1;
  }

  getProposalBond(): BigInt {
    return this.value2;
  }

  getSettled(): BigInt {
    return this.value3;
  }

  getRequestTimestamp(): BigInt {
    return this.value4;
  }

  getAdminResolutionTimestamp(): BigInt {
    return this.value5;
  }

  getEarlyResolutionEnabled(): boolean {
    return this.value6;
  }

  getResolved(): boolean {
    return this.value7;
  }

  getPaused(): boolean {
    return this.value8;
  }

  getRewardToken(): Address {
    return this.value9;
  }

  getAncillaryData(): Bytes {
    return this.value10;
  }
}

export class UmaCtfAdapterOld extends ethereum.SmartContract {
  static bind(address: Address): UmaCtfAdapterOld {
    return new UmaCtfAdapterOld("UmaCtfAdapterOld", address);
  }

  conditionalTokenContract(): Address {
    let result = super.call(
      "conditionalTokenContract",
      "conditionalTokenContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_conditionalTokenContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "conditionalTokenContract",
      "conditionalTokenContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  emergencySafetyPeriod(): BigInt {
    let result = super.call(
      "emergencySafetyPeriod",
      "emergencySafetyPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_emergencySafetyPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "emergencySafetyPeriod",
      "emergencySafetyPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpectedPayouts(questionID: Bytes): Array<BigInt> {
    let result = super.call(
      "getExpectedPayouts",
      "getExpectedPayouts(bytes32):(uint256[])",
      [ethereum.Value.fromFixedBytes(questionID)]
    );

    return result[0].toBigIntArray();
  }

  try_getExpectedPayouts(
    questionID: Bytes
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getExpectedPayouts",
      "getExpectedPayouts(bytes32):(uint256[])",
      [ethereum.Value.fromFixedBytes(questionID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  identifier(): Bytes {
    let result = super.call("identifier", "identifier():(bytes32)", []);

    return result[0].toBytes();
  }

  try_identifier(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("identifier", "identifier():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ignorePrice(): BigInt {
    let result = super.call("ignorePrice", "ignorePrice():(int256)", []);

    return result[0].toBigInt();
  }

  try_ignorePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ignorePrice", "ignorePrice():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isQuestionFlaggedForEmergencyResolution(questionID: Bytes): boolean {
    let result = super.call(
      "isQuestionFlaggedForEmergencyResolution",
      "isQuestionFlaggedForEmergencyResolution(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(questionID)]
    );

    return result[0].toBoolean();
  }

  try_isQuestionFlaggedForEmergencyResolution(
    questionID: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isQuestionFlaggedForEmergencyResolution",
      "isQuestionFlaggedForEmergencyResolution(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(questionID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isQuestionInitialized(questionID: Bytes): boolean {
    let result = super.call(
      "isQuestionInitialized",
      "isQuestionInitialized(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(questionID)]
    );

    return result[0].toBoolean();
  }

  try_isQuestionInitialized(questionID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isQuestionInitialized",
      "isQuestionInitialized(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(questionID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  questions(param0: Bytes): UmaCtfAdapterOld__questionsResult {
    let result = super.call(
      "questions",
      "questions(bytes32):(uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,address,bytes)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new UmaCtfAdapterOld__questionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBoolean(),
      result[8].toBoolean(),
      result[9].toAddress(),
      result[10].toBytes()
    );
  }

  try_questions(
    param0: Bytes
  ): ethereum.CallResult<UmaCtfAdapterOld__questionsResult> {
    let result = super.tryCall(
      "questions",
      "questions(bytes32):(uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,address,bytes)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UmaCtfAdapterOld__questionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBoolean(),
        value[8].toBoolean(),
        value[9].toAddress(),
        value[10].toBytes()
      )
    );
  }

  readyToRequestResolution(questionID: Bytes): boolean {
    let result = super.call(
      "readyToRequestResolution",
      "readyToRequestResolution(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(questionID)]
    );

    return result[0].toBoolean();
  }

  try_readyToRequestResolution(
    questionID: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "readyToRequestResolution",
      "readyToRequestResolution(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(questionID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  readyToSettle(questionID: Bytes): boolean {
    let result = super.call("readyToSettle", "readyToSettle(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(questionID)
    ]);

    return result[0].toBoolean();
  }

  try_readyToSettle(questionID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "readyToSettle",
      "readyToSettle(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(questionID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  umaFinder(): Address {
    let result = super.call("umaFinder", "umaFinder():(address)", []);

    return result[0].toAddress();
  }

  try_umaFinder(): ethereum.CallResult<Address> {
    let result = super.tryCall("umaFinder", "umaFinder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get conditionalTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get umaFinderAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class EmergencyReportPayoutsCall extends ethereum.Call {
  get inputs(): EmergencyReportPayoutsCall__Inputs {
    return new EmergencyReportPayoutsCall__Inputs(this);
  }

  get outputs(): EmergencyReportPayoutsCall__Outputs {
    return new EmergencyReportPayoutsCall__Outputs(this);
  }
}

export class EmergencyReportPayoutsCall__Inputs {
  _call: EmergencyReportPayoutsCall;

  constructor(call: EmergencyReportPayoutsCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get payouts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class EmergencyReportPayoutsCall__Outputs {
  _call: EmergencyReportPayoutsCall;

  constructor(call: EmergencyReportPayoutsCall) {
    this._call = call;
  }
}

export class FlagQuestionForEmergencyResolutionCall extends ethereum.Call {
  get inputs(): FlagQuestionForEmergencyResolutionCall__Inputs {
    return new FlagQuestionForEmergencyResolutionCall__Inputs(this);
  }

  get outputs(): FlagQuestionForEmergencyResolutionCall__Outputs {
    return new FlagQuestionForEmergencyResolutionCall__Outputs(this);
  }
}

export class FlagQuestionForEmergencyResolutionCall__Inputs {
  _call: FlagQuestionForEmergencyResolutionCall;

  constructor(call: FlagQuestionForEmergencyResolutionCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class FlagQuestionForEmergencyResolutionCall__Outputs {
  _call: FlagQuestionForEmergencyResolutionCall;

  constructor(call: FlagQuestionForEmergencyResolutionCall) {
    this._call = call;
  }
}

export class InitializeQuestionCall extends ethereum.Call {
  get inputs(): InitializeQuestionCall__Inputs {
    return new InitializeQuestionCall__Inputs(this);
  }

  get outputs(): InitializeQuestionCall__Outputs {
    return new InitializeQuestionCall__Outputs(this);
  }
}

export class InitializeQuestionCall__Inputs {
  _call: InitializeQuestionCall;

  constructor(call: InitializeQuestionCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get resolutionTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get reward(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get proposalBond(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get earlyResolutionEnabled(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class InitializeQuestionCall__Outputs {
  _call: InitializeQuestionCall;

  constructor(call: InitializeQuestionCall) {
    this._call = call;
  }
}

export class PauseQuestionCall extends ethereum.Call {
  get inputs(): PauseQuestionCall__Inputs {
    return new PauseQuestionCall__Inputs(this);
  }

  get outputs(): PauseQuestionCall__Outputs {
    return new PauseQuestionCall__Outputs(this);
  }
}

export class PauseQuestionCall__Inputs {
  _call: PauseQuestionCall;

  constructor(call: PauseQuestionCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PauseQuestionCall__Outputs {
  _call: PauseQuestionCall;

  constructor(call: PauseQuestionCall) {
    this._call = call;
  }
}

export class PrepareAndInitializeCall extends ethereum.Call {
  get inputs(): PrepareAndInitializeCall__Inputs {
    return new PrepareAndInitializeCall__Inputs(this);
  }

  get outputs(): PrepareAndInitializeCall__Outputs {
    return new PrepareAndInitializeCall__Outputs(this);
  }
}

export class PrepareAndInitializeCall__Inputs {
  _call: PrepareAndInitializeCall;

  constructor(call: PrepareAndInitializeCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get resolutionTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get reward(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get proposalBond(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get earlyResolutionEnabled(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class PrepareAndInitializeCall__Outputs {
  _call: PrepareAndInitializeCall;

  constructor(call: PrepareAndInitializeCall) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class ReportPayoutsCall extends ethereum.Call {
  get inputs(): ReportPayoutsCall__Inputs {
    return new ReportPayoutsCall__Inputs(this);
  }

  get outputs(): ReportPayoutsCall__Outputs {
    return new ReportPayoutsCall__Outputs(this);
  }
}

export class ReportPayoutsCall__Inputs {
  _call: ReportPayoutsCall;

  constructor(call: ReportPayoutsCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ReportPayoutsCall__Outputs {
  _call: ReportPayoutsCall;

  constructor(call: ReportPayoutsCall) {
    this._call = call;
  }
}

export class RequestResolutionDataCall extends ethereum.Call {
  get inputs(): RequestResolutionDataCall__Inputs {
    return new RequestResolutionDataCall__Inputs(this);
  }

  get outputs(): RequestResolutionDataCall__Outputs {
    return new RequestResolutionDataCall__Outputs(this);
  }
}

export class RequestResolutionDataCall__Inputs {
  _call: RequestResolutionDataCall;

  constructor(call: RequestResolutionDataCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RequestResolutionDataCall__Outputs {
  _call: RequestResolutionDataCall;

  constructor(call: RequestResolutionDataCall) {
    this._call = call;
  }
}

export class SetFinderAddressCall extends ethereum.Call {
  get inputs(): SetFinderAddressCall__Inputs {
    return new SetFinderAddressCall__Inputs(this);
  }

  get outputs(): SetFinderAddressCall__Outputs {
    return new SetFinderAddressCall__Outputs(this);
  }
}

export class SetFinderAddressCall__Inputs {
  _call: SetFinderAddressCall;

  constructor(call: SetFinderAddressCall) {
    this._call = call;
  }

  get newFinderAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFinderAddressCall__Outputs {
  _call: SetFinderAddressCall;

  constructor(call: SetFinderAddressCall) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }
}

export class UnPauseQuestionCall extends ethereum.Call {
  get inputs(): UnPauseQuestionCall__Inputs {
    return new UnPauseQuestionCall__Inputs(this);
  }

  get outputs(): UnPauseQuestionCall__Outputs {
    return new UnPauseQuestionCall__Outputs(this);
  }
}

export class UnPauseQuestionCall__Inputs {
  _call: UnPauseQuestionCall;

  constructor(call: UnPauseQuestionCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UnPauseQuestionCall__Outputs {
  _call: UnPauseQuestionCall;

  constructor(call: UnPauseQuestionCall) {
    this._call = call;
  }
}

export class UpdateQuestionCall extends ethereum.Call {
  get inputs(): UpdateQuestionCall__Inputs {
    return new UpdateQuestionCall__Inputs(this);
  }

  get outputs(): UpdateQuestionCall__Outputs {
    return new UpdateQuestionCall__Outputs(this);
  }
}

export class UpdateQuestionCall__Inputs {
  _call: UpdateQuestionCall;

  constructor(call: UpdateQuestionCall) {
    this._call = call;
  }

  get questionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get resolutionTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get reward(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get proposalBond(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get earlyResolutionEnabled(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class UpdateQuestionCall__Outputs {
  _call: UpdateQuestionCall;

  constructor(call: UpdateQuestionCall) {
    this._call = call;
  }
}
