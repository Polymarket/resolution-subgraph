// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DisputePrice extends ethereum.Event {
  get params(): DisputePrice__Params {
    return new DisputePrice__Params(this);
  }
}

export class DisputePrice__Params {
  _event: DisputePrice;

  constructor(event: DisputePrice) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get disputer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get identifier(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get proposedPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ProposePrice extends ethereum.Event {
  get params(): ProposePrice__Params {
    return new ProposePrice__Params(this);
  }
}

export class ProposePrice__Params {
  _event: ProposePrice;

  constructor(event: ProposePrice) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get identifier(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get proposedPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class RequestPrice extends ethereum.Event {
  get params(): RequestPrice__Params {
    return new RequestPrice__Params(this);
  }
}

export class RequestPrice__Params {
  _event: RequestPrice;

  constructor(event: RequestPrice) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get identifier(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get currency(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get finalFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Settle extends ethereum.Event {
  get params(): Settle__Params {
    return new Settle__Params(this);
  }
}

export class Settle__Params {
  _event: Settle;

  constructor(event: Settle) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get disputer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get identifier(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get payout(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class OptimisticOracleOld__getRequestResultValue0Struct extends ethereum.Tuple {
  get proposer(): Address {
    return this[0].toAddress();
  }

  get disputer(): Address {
    return this[1].toAddress();
  }

  get currency(): Address {
    return this[2].toAddress();
  }

  get settled(): boolean {
    return this[3].toBoolean();
  }

  get refundOnDispute(): boolean {
    return this[4].toBoolean();
  }

  get proposedPrice(): BigInt {
    return this[5].toBigInt();
  }

  get resolvedPrice(): BigInt {
    return this[6].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[7].toBigInt();
  }

  get reward(): BigInt {
    return this[8].toBigInt();
  }

  get finalFee(): BigInt {
    return this[9].toBigInt();
  }

  get bond(): BigInt {
    return this[10].toBigInt();
  }

  get customLiveness(): BigInt {
    return this[11].toBigInt();
  }
}

export class OptimisticOracleOld__requestsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: boolean;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: boolean,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromSignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getProposer(): Address {
    return this.value0;
  }

  getDisputer(): Address {
    return this.value1;
  }

  getCurrency(): Address {
    return this.value2;
  }

  getSettled(): boolean {
    return this.value3;
  }

  getRefundOnDispute(): boolean {
    return this.value4;
  }

  getProposedPrice(): BigInt {
    return this.value5;
  }

  getResolvedPrice(): BigInt {
    return this.value6;
  }

  getExpirationTime(): BigInt {
    return this.value7;
  }

  getReward(): BigInt {
    return this.value8;
  }

  getFinalFee(): BigInt {
    return this.value9;
  }

  getBond(): BigInt {
    return this.value10;
  }

  getCustomLiveness(): BigInt {
    return this.value11;
  }
}

export class OptimisticOracleOld extends ethereum.SmartContract {
  static bind(address: Address): OptimisticOracleOld {
    return new OptimisticOracleOld("OptimisticOracleOld", address);
  }

  ancillaryBytesLimit(): BigInt {
    let result = super.call(
      "ancillaryBytesLimit",
      "ancillaryBytesLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ancillaryBytesLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ancillaryBytesLimit",
      "ancillaryBytesLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultLiveness(): BigInt {
    let result = super.call(
      "defaultLiveness",
      "defaultLiveness():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultLiveness(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultLiveness",
      "defaultLiveness():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  disputePrice(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): BigInt {
    let result = super.call(
      "disputePrice",
      "disputePrice(address,bytes32,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );

    return result[0].toBigInt();
  }

  try_disputePrice(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "disputePrice",
      "disputePrice(address,bytes32,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  disputePriceFor(
    disputer: Address,
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): BigInt {
    let result = super.call(
      "disputePriceFor",
      "disputePriceFor(address,address,bytes32,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(disputer),
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );

    return result[0].toBigInt();
  }

  try_disputePriceFor(
    disputer: Address,
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "disputePriceFor",
      "disputePriceFor(address,address,bytes32,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(disputer),
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finder(): Address {
    let result = super.call("finder", "finder():(address)", []);

    return result[0].toAddress();
  }

  try_finder(): ethereum.CallResult<Address> {
    let result = super.tryCall("finder", "finder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentTime(): BigInt {
    let result = super.call("getCurrentTime", "getCurrentTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentTime",
      "getCurrentTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRequest(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): OptimisticOracleOld__getRequestResultValue0Struct {
    let result = super.call(
      "getRequest",
      "getRequest(address,bytes32,uint256,bytes):((address,address,address,bool,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );

    return changetype<OptimisticOracleOld__getRequestResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getRequest(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): ethereum.CallResult<OptimisticOracleOld__getRequestResultValue0Struct> {
    let result = super.tryCall(
      "getRequest",
      "getRequest(address,bytes32,uint256,bytes):((address,address,address,bool,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OptimisticOracleOld__getRequestResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getState(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): i32 {
    let result = super.call(
      "getState",
      "getState(address,bytes32,uint256,bytes):(uint8)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );

    return result[0].toI32();
  }

  try_getState(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getState",
      "getState(address,bytes32,uint256,bytes):(uint8)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  hasPrice(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): boolean {
    let result = super.call(
      "hasPrice",
      "hasPrice(address,bytes32,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasPrice(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPrice",
      "hasPrice(address,bytes32,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposePrice(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes,
    proposedPrice: BigInt
  ): BigInt {
    let result = super.call(
      "proposePrice",
      "proposePrice(address,bytes32,uint256,bytes,int256):(uint256)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromSignedBigInt(proposedPrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_proposePrice(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes,
    proposedPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposePrice",
      "proposePrice(address,bytes32,uint256,bytes,int256):(uint256)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromSignedBigInt(proposedPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposePriceFor(
    proposer: Address,
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes,
    proposedPrice: BigInt
  ): BigInt {
    let result = super.call(
      "proposePriceFor",
      "proposePriceFor(address,address,bytes32,uint256,bytes,int256):(uint256)",
      [
        ethereum.Value.fromAddress(proposer),
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromSignedBigInt(proposedPrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_proposePriceFor(
    proposer: Address,
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes,
    proposedPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposePriceFor",
      "proposePriceFor(address,address,bytes32,uint256,bytes,int256):(uint256)",
      [
        ethereum.Value.fromAddress(proposer),
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromSignedBigInt(proposedPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestPrice(
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes,
    currency: Address,
    reward: BigInt
  ): BigInt {
    let result = super.call(
      "requestPrice",
      "requestPrice(bytes32,uint256,bytes,address,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(reward)
      ]
    );

    return result[0].toBigInt();
  }

  try_requestPrice(
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes,
    currency: Address,
    reward: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestPrice",
      "requestPrice(bytes32,uint256,bytes,address,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(reward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requests(param0: Bytes): OptimisticOracleOld__requestsResult {
    let result = super.call(
      "requests",
      "requests(bytes32):(address,address,address,bool,bool,int256,int256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new OptimisticOracleOld__requestsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBoolean(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt()
    );
  }

  try_requests(
    param0: Bytes
  ): ethereum.CallResult<OptimisticOracleOld__requestsResult> {
    let result = super.tryCall(
      "requests",
      "requests(bytes32):(address,address,address,bool,bool,int256,int256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptimisticOracleOld__requestsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBoolean(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt()
      )
    );
  }

  setBond(
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes,
    bond: BigInt
  ): BigInt {
    let result = super.call(
      "setBond",
      "setBond(bytes32,uint256,bytes,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromUnsignedBigInt(bond)
      ]
    );

    return result[0].toBigInt();
  }

  try_setBond(
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes,
    bond: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setBond",
      "setBond(bytes32,uint256,bytes,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromUnsignedBigInt(bond)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settle(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): BigInt {
    let result = super.call(
      "settle",
      "settle(address,bytes32,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );

    return result[0].toBigInt();
  }

  try_settle(
    requester: Address,
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settle",
      "settle(address,bytes32,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settleAndGetPrice(
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): BigInt {
    let result = super.call(
      "settleAndGetPrice",
      "settleAndGetPrice(bytes32,uint256,bytes):(int256)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );

    return result[0].toBigInt();
  }

  try_settleAndGetPrice(
    identifier: Bytes,
    timestamp: BigInt,
    ancillaryData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settleAndGetPrice",
      "settleAndGetPrice(bytes32,uint256,bytes):(int256)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(ancillaryData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stampAncillaryData(ancillaryData: Bytes, requester: Address): Bytes {
    let result = super.call(
      "stampAncillaryData",
      "stampAncillaryData(bytes,address):(bytes)",
      [
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromAddress(requester)
      ]
    );

    return result[0].toBytes();
  }

  try_stampAncillaryData(
    ancillaryData: Bytes,
    requester: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "stampAncillaryData",
      "stampAncillaryData(bytes,address):(bytes)",
      [
        ethereum.Value.fromBytes(ancillaryData),
        ethereum.Value.fromAddress(requester)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  timerAddress(): Address {
    let result = super.call("timerAddress", "timerAddress():(address)", []);

    return result[0].toAddress();
  }

  try_timerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("timerAddress", "timerAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _liveness(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _finderAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _timerAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DisputePriceCall extends ethereum.Call {
  get inputs(): DisputePriceCall__Inputs {
    return new DisputePriceCall__Inputs(this);
  }

  get outputs(): DisputePriceCall__Outputs {
    return new DisputePriceCall__Outputs(this);
  }
}

export class DisputePriceCall__Inputs {
  _call: DisputePriceCall;

  constructor(call: DisputePriceCall) {
    this._call = call;
  }

  get requester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get identifier(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DisputePriceCall__Outputs {
  _call: DisputePriceCall;

  constructor(call: DisputePriceCall) {
    this._call = call;
  }

  get totalBond(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DisputePriceForCall extends ethereum.Call {
  get inputs(): DisputePriceForCall__Inputs {
    return new DisputePriceForCall__Inputs(this);
  }

  get outputs(): DisputePriceForCall__Outputs {
    return new DisputePriceForCall__Outputs(this);
  }
}

export class DisputePriceForCall__Inputs {
  _call: DisputePriceForCall;

  constructor(call: DisputePriceForCall) {
    this._call = call;
  }

  get disputer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get requester(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get identifier(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DisputePriceForCall__Outputs {
  _call: DisputePriceForCall;

  constructor(call: DisputePriceForCall) {
    this._call = call;
  }

  get totalBond(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProposePriceCall extends ethereum.Call {
  get inputs(): ProposePriceCall__Inputs {
    return new ProposePriceCall__Inputs(this);
  }

  get outputs(): ProposePriceCall__Outputs {
    return new ProposePriceCall__Outputs(this);
  }
}

export class ProposePriceCall__Inputs {
  _call: ProposePriceCall;

  constructor(call: ProposePriceCall) {
    this._call = call;
  }

  get requester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get identifier(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get proposedPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ProposePriceCall__Outputs {
  _call: ProposePriceCall;

  constructor(call: ProposePriceCall) {
    this._call = call;
  }

  get totalBond(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProposePriceForCall extends ethereum.Call {
  get inputs(): ProposePriceForCall__Inputs {
    return new ProposePriceForCall__Inputs(this);
  }

  get outputs(): ProposePriceForCall__Outputs {
    return new ProposePriceForCall__Outputs(this);
  }
}

export class ProposePriceForCall__Inputs {
  _call: ProposePriceForCall;

  constructor(call: ProposePriceForCall) {
    this._call = call;
  }

  get proposer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get requester(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get identifier(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get proposedPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ProposePriceForCall__Outputs {
  _call: ProposePriceForCall;

  constructor(call: ProposePriceForCall) {
    this._call = call;
  }

  get totalBond(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RequestPriceCall extends ethereum.Call {
  get inputs(): RequestPriceCall__Inputs {
    return new RequestPriceCall__Inputs(this);
  }

  get outputs(): RequestPriceCall__Outputs {
    return new RequestPriceCall__Outputs(this);
  }
}

export class RequestPriceCall__Inputs {
  _call: RequestPriceCall;

  constructor(call: RequestPriceCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get currency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get reward(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RequestPriceCall__Outputs {
  _call: RequestPriceCall;

  constructor(call: RequestPriceCall) {
    this._call = call;
  }

  get totalBond(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetBondCall extends ethereum.Call {
  get inputs(): SetBondCall__Inputs {
    return new SetBondCall__Inputs(this);
  }

  get outputs(): SetBondCall__Outputs {
    return new SetBondCall__Outputs(this);
  }
}

export class SetBondCall__Inputs {
  _call: SetBondCall;

  constructor(call: SetBondCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get bond(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetBondCall__Outputs {
  _call: SetBondCall;

  constructor(call: SetBondCall) {
    this._call = call;
  }

  get totalBond(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetCurrentTimeCall extends ethereum.Call {
  get inputs(): SetCurrentTimeCall__Inputs {
    return new SetCurrentTimeCall__Inputs(this);
  }

  get outputs(): SetCurrentTimeCall__Outputs {
    return new SetCurrentTimeCall__Outputs(this);
  }
}

export class SetCurrentTimeCall__Inputs {
  _call: SetCurrentTimeCall;

  constructor(call: SetCurrentTimeCall) {
    this._call = call;
  }

  get time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCurrentTimeCall__Outputs {
  _call: SetCurrentTimeCall;

  constructor(call: SetCurrentTimeCall) {
    this._call = call;
  }
}

export class SetCustomLivenessCall extends ethereum.Call {
  get inputs(): SetCustomLivenessCall__Inputs {
    return new SetCustomLivenessCall__Inputs(this);
  }

  get outputs(): SetCustomLivenessCall__Outputs {
    return new SetCustomLivenessCall__Outputs(this);
  }
}

export class SetCustomLivenessCall__Inputs {
  _call: SetCustomLivenessCall;

  constructor(call: SetCustomLivenessCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get customLiveness(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetCustomLivenessCall__Outputs {
  _call: SetCustomLivenessCall;

  constructor(call: SetCustomLivenessCall) {
    this._call = call;
  }
}

export class SetRefundOnDisputeCall extends ethereum.Call {
  get inputs(): SetRefundOnDisputeCall__Inputs {
    return new SetRefundOnDisputeCall__Inputs(this);
  }

  get outputs(): SetRefundOnDisputeCall__Outputs {
    return new SetRefundOnDisputeCall__Outputs(this);
  }
}

export class SetRefundOnDisputeCall__Inputs {
  _call: SetRefundOnDisputeCall;

  constructor(call: SetRefundOnDisputeCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetRefundOnDisputeCall__Outputs {
  _call: SetRefundOnDisputeCall;

  constructor(call: SetRefundOnDisputeCall) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get requester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get identifier(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get payout(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SettleAndGetPriceCall extends ethereum.Call {
  get inputs(): SettleAndGetPriceCall__Inputs {
    return new SettleAndGetPriceCall__Inputs(this);
  }

  get outputs(): SettleAndGetPriceCall__Outputs {
    return new SettleAndGetPriceCall__Outputs(this);
  }
}

export class SettleAndGetPriceCall__Inputs {
  _call: SettleAndGetPriceCall;

  constructor(call: SettleAndGetPriceCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SettleAndGetPriceCall__Outputs {
  _call: SettleAndGetPriceCall;

  constructor(call: SettleAndGetPriceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
